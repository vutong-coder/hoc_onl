import React, { useState } from 'react'
import Modal from '../common/Modal'
import { Shuffle, AlertCircle } from 'lucide-react'
import { RandomExamConfig } from '../../types/exam'
import '../../styles/form.css'

interface RandomExamModalProps {
	isOpen: boolean
	onClose: () => void
	onGenerate: (config: RandomExamConfig) => void
}

const subjects = [
	'L·∫≠p tr√¨nh Web',
	'C∆° s·ªü d·ªØ li·ªáu',
	'Thu·∫≠t to√°n',
	'H·ªá ƒëi·ªÅu h√†nh',
	'M·∫°ng m√°y t√≠nh',
	'L·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng',
	'Tr√≠ tu·ªá nh√¢n t·∫°o',
	'Ph√°t tri·ªÉn ph·∫ßn m·ªÅm',
	'An to√†n th√¥ng tin',
	'H·ªçc m√°y'
]

export default function RandomExamModal({
	isOpen,
	onClose,
	onGenerate
}: RandomExamModalProps): JSX.Element {
	
	const [subject, setSubject] = useState(subjects[0])
	const [difficulty, setDifficulty] = useState<'easy' | 'medium' | 'hard' | 'mixed'>('mixed')
	const [totalQuestions, setTotalQuestions] = useState(30)
	const [duration, setDuration] = useState(60)
	const [useCustomDistribution, setUseCustomDistribution] = useState(false)
	const [easyCount, setEasyCount] = useState(10)
	const [mediumCount, setMediumCount] = useState(15)
	const [hardCount, setHardCount] = useState(5)

	const handleGenerate = () => {
		const config: RandomExamConfig = {
			subject,
			difficulty,
			totalQuestions,
			duration,
			...(useCustomDistribution && difficulty === 'mixed' && {
				easyCount,
				mediumCount,
				hardCount
			})
		}
		
		onGenerate(config)
		resetForm()
	}

	const resetForm = () => {
		setSubject(subjects[0])
		setDifficulty('mixed')
		setTotalQuestions(30)
		setDuration(60)
		setUseCustomDistribution(false)
		setEasyCount(10)
		setMediumCount(15)
		setHardCount(5)
	}

	const handleClose = () => {
		resetForm()
		onClose()
	}

	// Validate custom distribution
	const isValidDistribution = () => {
		if (!useCustomDistribution || difficulty !== 'mixed') return true
		return (easyCount + mediumCount + hardCount) === totalQuestions
	}

	return (
		<Modal
			isOpen={isOpen}
			onClose={handleClose}
			title="Sinh ƒë·ªÅ thi ng·∫´u nhi√™n"
			maxWidth="600px"
			footer={
				<>
					<button 
						className="btn btn-secondary"
						onClick={handleClose}
					>
						H·ªßy
					</button>
					<button 
						className="btn btn-primary"
						onClick={handleGenerate}
						disabled={!isValidDistribution()}
					>
						<Shuffle size={18} />
						Sinh ƒë·ªÅ thi
					</button>
				</>
			}
		>
			<div>
				<div className="form-group">
					<label className="form-label">M√¥n h·ªçc *</label>
					<select
						className="form-select"
						value={subject}
						onChange={(e) => setSubject(e.target.value)}
					>
						{subjects.map(s => (
							<option key={s} value={s}>{s}</option>
						))}
					</select>
				</div>

				<div className="form-row">
					<div className="form-group">
						<label className="form-label">T·ªïng s·ªë c√¢u h·ªèi *</label>
						<input
							type="number"
							className="form-input"
							value={totalQuestions}
							onChange={(e) => setTotalQuestions(parseInt(e.target.value) || 0)}
							min="1"
							max="100"
						/>
					</div>

					<div className="form-group">
						<label className="form-label">Th·ªùi gian (ph√∫t) *</label>
						<input
							type="number"
							className="form-input"
							value={duration}
							onChange={(e) => setDuration(parseInt(e.target.value) || 0)}
							min="1"
							max="300"
						/>
					</div>
				</div>

				<div className="form-group">
					<label className="form-label">ƒê·ªô kh√≥</label>
					<select
						className="form-select"
						value={difficulty}
						onChange={(e) => setDifficulty(e.target.value as any)}
					>
						<option value="mixed">Tr·ªôn l·∫´n (D·ªÖ + TB + Kh√≥)</option>
						<option value="easy">Ch·ªâ c√¢u d·ªÖ</option>
						<option value="medium">Ch·ªâ c√¢u trung b√¨nh</option>
						<option value="hard">Ch·ªâ c√¢u kh√≥</option>
					</select>
				</div>

				{difficulty === 'mixed' && (
					<>
						<div className="form-group">
							<label style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
								<input
									type="checkbox"
									checked={useCustomDistribution}
									onChange={(e) => setUseCustomDistribution(e.target.checked)}
								/>
								<span className="form-label" style={{ marginBottom: 0 }}>
									T√πy ch·ªânh ph√¢n b·ªï ƒë·ªô kh√≥
								</span>
							</label>
						</div>

						{useCustomDistribution && (
							<>
								<div 
									style={{ 
										padding: '12px',
										background: 'var(--muted)',
										borderRadius: 'var(--radius-md)',
										marginBottom: '16px',
										display: 'flex',
										alignItems: 'center',
										gap: '8px',
										fontSize: '13px'
									}}
								>
									<AlertCircle size={16} />
									<span>
										T·ªïng ph·∫£i b·∫±ng {totalQuestions} c√¢u. 
										Hi·ªán t·∫°i: {easyCount + mediumCount + hardCount} c√¢u
									</span>
								</div>

								<div className="form-grid-3">
									<div className="form-group">
										<label className="form-label">S·ªë c√¢u d·ªÖ</label>
										<input
											type="number"
											className="form-input"
											value={easyCount}
											onChange={(e) => setEasyCount(parseInt(e.target.value) || 0)}
											min="0"
										/>
									</div>

									<div className="form-group">
										<label className="form-label">S·ªë c√¢u trung b√¨nh</label>
										<input
											type="number"
											className="form-input"
											value={mediumCount}
											onChange={(e) => setMediumCount(parseInt(e.target.value) || 0)}
											min="0"
										/>
									</div>

									<div className="form-group-full">
										<label className="form-label">S·ªë c√¢u kh√≥</label>
										<input
											type="number"
											className="form-input"
											value={hardCount}
											onChange={(e) => setHardCount(parseInt(e.target.value) || 0)}
											min="0"
										/>
									</div>
								</div>

								{!isValidDistribution() && (
									<div 
										style={{ 
											color: '#ef4444',
											fontSize: '13px',
											marginTop: '8px'
										}}
									>
										‚ö†Ô∏è T·ªïng s·ªë c√¢u ({easyCount + mediumCount + hardCount}) 
										ph·∫£i b·∫±ng {totalQuestions}
									</div>
								)}
							</>
						)}
					</>
				)}

				<div 
					style={{ 
						marginTop: '20px',
						padding: '16px',
						background: 'var(--accent)',
						color: 'var(--accent-foreground)',
						borderRadius: 'var(--radius-md)',
						fontSize: '14px'
					}}
				>
					<strong>üí° L∆∞u √Ω:</strong> H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ch·ªçn ng·∫´u nhi√™n c√¢u h·ªèi t·ª´ ng√¢n h√†ng ƒë·ªÅ thi 
					theo m√¥n h·ªçc v√† ƒë·ªô kh√≥ ƒë√£ ch·ªçn.
				</div>
			</div>
		</Modal>
	)
}

