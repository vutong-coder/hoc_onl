import { useState } from 'react'
import { Book, Code, FileText, Video, CheckCircle, Clock, TrendingUp, Star, Play, Lock, ChevronRight, Search, Filter } from 'lucide-react'
import styles from '../assets/css/PreparePage.module.css'

interface Course {
    id: string
    title: string
    description: string
    progress: number
    totalLessons: number
    completedLessons: number
    level: 'Beginner' | 'Intermediate' | 'Advanced'
    duration: string
    category: string
    isLocked: boolean
    thumbnail: string
    instructor: string
    rating: number
}

interface LearningPath {
    id: string
    title: string
    description: string
    courses: number
    duration: string
    difficulty: 'Beginner' | 'Intermediate' | 'Advanced'
    icon: string
}

export default function PreparePage(): JSX.Element {
    const [selectedCategory, setSelectedCategory] = useState('all')
    const [searchQuery, setSearchQuery] = useState('')

    const categories = [
        { value: 'all', label: 'T·∫•t c·∫£' },
        { value: 'programming', label: 'L·∫≠p tr√¨nh' },
        { value: 'web', label: 'Web Development' },
        { value: 'data', label: 'Data Science' },
        { value: 'mobile', label: 'Mobile' },
        { value: 'devops', label: 'DevOps' }
    ]

    const learningPaths: LearningPath[] = [
        {
            id: '1',
            title: 'Full Stack Web Developer',
            description: 'H·ªçc l·∫≠p tr√¨nh web t·ª´ frontend ƒë·∫øn backend, database v√† deployment',
            courses: 12,
            duration: '6 th√°ng',
            difficulty: 'Intermediate',
            icon: 'üåê'
        },
        {
            id: '2',
            title: 'Python Developer',
            description: 'L√†m ch·ªß Python t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao, automation v√† data science',
            courses: 8,
            duration: '4 th√°ng',
            difficulty: 'Beginner',
            icon: 'üêç'
        },
        {
            id: '3',
            title: 'Data Scientist',
            description: 'Machine Learning, Deep Learning v√† Big Data Analytics',
            courses: 10,
            duration: '5 th√°ng',
            difficulty: 'Advanced',
            icon: 'üìä'
        },
        {
            id: '4',
            title: 'Mobile App Developer',
            description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng iOS v√† Android v·ªõi React Native',
            courses: 9,
            duration: '5 th√°ng',
            difficulty: 'Intermediate',
            icon: 'üì±'
        }
    ]

    const courses: Course[] = [
        {
            id: '1',
            title: 'Python C∆° B·∫£n - Zero to Hero',
            description: 'H·ªçc Python t·ª´ con s·ªë 0, ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu',
            progress: 65,
            totalLessons: 50,
            completedLessons: 32,
            level: 'Beginner',
            duration: '40 gi·ªù',
            category: 'programming',
            isLocked: false,
            thumbnail: '/images/python.jpg',
            instructor: 'Nguy·ªÖn VƒÉn A',
            rating: 4.8
        },
        {
            id: '2',
            title: 'React & TypeScript Masterclass',
            description: 'X√¢y d·ª±ng ·ª©ng d·ª•ng web hi·ªán ƒë·∫°i v·ªõi React v√† TypeScript',
            progress: 30,
            totalLessons: 60,
            completedLessons: 18,
            level: 'Intermediate',
            duration: '50 gi·ªù',
            category: 'web',
            isLocked: false,
            thumbnail: '/images/react.jpg',
            instructor: 'Tr·∫ßn Th·ªã B',
            rating: 4.9
        },
        {
            id: '3',
            title: 'Data Science v·ªõi Python',
            description: 'Machine Learning, Data Analysis v√† Visualization',
            progress: 0,
            totalLessons: 45,
            completedLessons: 0,
            level: 'Advanced',
            duration: '60 gi·ªù',
            category: 'data',
            isLocked: false,
            thumbnail: '/images/datascience.jpg',
            instructor: 'L√™ VƒÉn C',
            rating: 4.7
        },
        {
            id: '4',
            title: 'Node.js Backend Development',
            description: 'X√¢y d·ª±ng RESTful API v√† Microservices v·ªõi Node.js',
            progress: 45,
            totalLessons: 40,
            completedLessons: 18,
            level: 'Intermediate',
            duration: '45 gi·ªù',
            category: 'web',
            isLocked: false,
            thumbnail: '/images/nodejs.jpg',
            instructor: 'Ph·∫°m VƒÉn D',
            rating: 4.6
        },
        {
            id: '5',
            title: 'Advanced Algorithms & Data Structures',
            description: 'Thu·∫≠t to√°n n√¢ng cao v√† c·∫•u tr√∫c d·ªØ li·ªáu cho ph·ªèng v·∫•n',
            progress: 0,
            totalLessons: 35,
            completedLessons: 0,
            level: 'Advanced',
            duration: '30 gi·ªù',
            category: 'programming',
            isLocked: true,
            thumbnail: '/images/algorithms.jpg',
            instructor: 'Ho√†ng Th·ªã E',
            rating: 4.9
        },
        {
            id: '6',
            title: 'Mobile App Development v·ªõi React Native',
            description: 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng iOS v√† Android ƒëa n·ªÅn t·∫£ng',
            progress: 0,
            totalLessons: 48,
            completedLessons: 0,
            level: 'Intermediate',
            duration: '55 gi·ªù',
            category: 'mobile',
            isLocked: true,
            thumbnail: '/images/mobile.jpg',
            instructor: 'Ng√¥ VƒÉn F',
            rating: 4.5
        }
    ]

    const filteredCourses = courses.filter(course => {
        const matchesCategory = selectedCategory === 'all' || course.category === selectedCategory
        const matchesSearch = course.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
            course.description.toLowerCase().includes(searchQuery.toLowerCase())
        return matchesCategory && matchesSearch
    })

    const getDifficultyColor = (difficulty: string) => {
        switch (difficulty) {
            case 'Beginner': return 'var(--primary)'
            case 'Intermediate': return 'var(--accent)'
            case 'Advanced': return 'var(--destructive)'
            default: return 'var(--foreground)'
        }
    }

    return (
        <div className={styles.preparePage}>
            {/* Header */}
            <div className={styles.header}>
                <div className={styles.headerContent}>
                    <h1 className={styles.title}>
                        <Book style={{ width: '32px', height: '32px' }} />
                        H·ªçc T·∫≠p & Chu·∫©n B·ªã
                    </h1>
                    <p className={styles.subtitle}>
                        N√¢ng cao k·ªπ nƒÉng l·∫≠p tr√¨nh v·ªõi c√°c kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng cao
                    </p>
                </div>

                {/* Search and Filter */}
                <div className={styles.searchFilter}>
                    <div className={styles.searchBox}>
                        <Search style={{ width: '20px', height: '20px' }} />
                        <input
                            type="text"
                            placeholder="T√¨m ki·∫øm kh√≥a h·ªçc..."
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                        />
                    </div>
                    <div className={styles.categories}>
                        {categories.map(cat => (
                            <button
                                key={cat.value}
                                className={`${styles.categoryBtn} ${selectedCategory === cat.value ? styles.active : ''}`}
                                onClick={() => setSelectedCategory(cat.value)}
                            >
                                {cat.label}
                            </button>
                        ))}
                    </div>
                </div>
            </div>

            {/* Learning Paths Section */}
            <section className={styles.section}>
                <div className={styles.sectionHeader}>
                    <h2 className={styles.sectionTitle}>
                        <TrendingUp style={{ width: '24px', height: '24px' }} />
                        L·ªô Tr√¨nh H·ªçc T·∫≠p
                    </h2>
                    <p className={styles.sectionDesc}>Ch·ªçn l·ªô tr√¨nh ph√π h·ª£p v·ªõi m·ª•c ti√™u ngh·ªÅ nghi·ªáp c·ªßa b·∫°n</p>
                </div>

                <div className={styles.pathsGrid}>
                    {learningPaths.map(path => (
                        <div key={path.id} className={styles.pathCard}>
                            <div className={styles.pathIcon}>{path.icon}</div>
                            <h3 className={styles.pathTitle}>{path.title}</h3>
                            <p className={styles.pathDesc}>{path.description}</p>
                            <div className={styles.pathMeta}>
                                <span><Book style={{ width: '16px', height: '16px' }} /> {path.courses} kh√≥a h·ªçc</span>
                                <span><Clock style={{ width: '16px', height: '16px' }} /> {path.duration}</span>
                                <span style={{ color: getDifficultyColor(path.difficulty) }}>
                                    {path.difficulty}
                                </span>
                            </div>
                            <button className={styles.pathBtn}>
                                Xem chi ti·∫øt
                                <ChevronRight style={{ width: '16px', height: '16px' }} />
                            </button>
                        </div>
                    ))}
                </div>
            </section>

            {/* Courses Section */}
            <section className={styles.section}>
                <div className={styles.sectionHeader}>
                    <h2 className={styles.sectionTitle}>
                        <Video style={{ width: '24px', height: '24px' }} />
                        Kh√≥a H·ªçc C·ªßa B·∫°n
                    </h2>
                    <p className={styles.sectionDesc}>
                        Hi·ªÉn th·ªã {filteredCourses.length} kh√≥a h·ªçc
                    </p>
                </div>

                <div className={styles.coursesGrid}>
                    {filteredCourses.map(course => (
                        <div key={course.id} className={`${styles.courseCard} ${course.isLocked ? styles.locked : ''}`}>
                            {course.isLocked && (
                                <div className={styles.lockBadge}>
                                    <Lock style={{ width: '16px', height: '16px' }} />
                                </div>
                            )}

                            <div className={styles.courseThumbnail}>
                                <div className={styles.thumbnailPlaceholder}>
                                    <Code style={{ width: '48px', height: '48px' }} />
                                </div>
                                {course.progress > 0 && (
                                    <div className={styles.progressBadge}>
                                        {course.progress}%
                                    </div>
                                )}
                            </div>

                            <div className={styles.courseContent}>
                                <div className={styles.courseMeta}>
                                    <span className={styles.courseLevel} style={{ color: getDifficultyColor(course.level) }}>
                                        {course.level}
                                    </span>
                                    <span className={styles.courseRating}>
                                        <Star style={{ width: '14px', height: '14px', fill: 'var(--accent)' }} />
                                        {course.rating}
                                    </span>
                                </div>

                                <h3 className={styles.courseTitle}>{course.title}</h3>
                                <p className={styles.courseDesc}>{course.description}</p>

                                <div className={styles.courseInstructor}>
                                    <span>Gi·∫£ng vi√™n: {course.instructor}</span>
                                </div>

                                <div className={styles.courseStats}>
                                    <span>
                                        <FileText style={{ width: '16px', height: '16px' }} />
                                        {course.completedLessons}/{course.totalLessons} b√†i
                                    </span>
                                    <span>
                                        <Clock style={{ width: '16px', height: '16px' }} />
                                        {course.duration}
                                    </span>
                                </div>

                                {course.progress > 0 && (
                                    <div className={styles.progressBar}>
                                        <div
                                            className={styles.progressFill}
                                            style={{ width: `${course.progress}%` }}
                                        />
                                    </div>
                                )}

                                <button
                                    className={styles.courseBtn}
                                    disabled={course.isLocked}
                                >
                                    {course.isLocked ? (
                                        <>
                                            <Lock style={{ width: '16px', height: '16px' }} />
                                            M·ªü kh√≥a v·ªõi token
                                        </>
                                    ) : course.progress > 0 ? (
                                        <>
                                            <Play style={{ width: '16px', height: '16px' }} />
                                            Ti·∫øp t·ª•c h·ªçc
                                        </>
                                    ) : (
                                        <>
                                            <Play style={{ width: '16px', height: '16px' }} />
                                            B·∫Øt ƒë·∫ßu h·ªçc
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                    ))}
                </div>
            </section>
        </div>
    )
}
